import { getToken, getPureToken, getThemeMode } from 'model/DataManager';
import PropertyIcon from './PropertyIcon';
import PropertyTypes from 'enums/PropertyTypes';


export const themeModeIcon =  `
  <div class="themem-mode-list" data-toggle="dropdown" title="Change theme mode">
    <span class="tmicon tmicon-sun"></span>
    <span class="tmicon tmicon-moon"></span>
  </div>
`;
export default (property) => {
  const { $element, options } = property;
  const themeModes = getThemeMode();
  const _token = $element.data('token');
  const tokensMap = getPureToken(options.type === PropertyTypes.STROKE_FILL ? [PropertyTypes.FILL_COLOR, PropertyTypes.STROKE_FILL] : options.type);
  // const tokenList = Object.keys(tokensMap)
  //     .map(key => tokensMap[key])
  //     .filter(token => token.id !== _token.id);
  const _useToken = getToken(options.useToken);
  const $detachToken = $(detachIcon).data("property", property);
  const $useToken = $(useTokenIcon);
  
  const $propertyView = $element.data('propertyView');
  const $tokenList = $('<ul class="dropdown-menu dropdown-menu-multi-select pull-right"></ul>').data("property", property);
  const $themeModeIcon = $(themeModeIcon);
  const $themeModeList = $(`<ul class="dropdown-menu dropdown-menu-multi-select pull-right"></ul>`).data("property", property);
  let $themeMode;

  if (options.type === PropertyTypes.OPACITY || options.type === PropertyTypes.FILL_COLOR || options.type === PropertyTypes.STROKE_FILL) {
    $themeMode = $(`<div class="dropdown"></div>`)
      .append($themeModeIcon)
      .append(
        $themeModeList.append(
          themeModes.map((mode, index) => {
            const $item = $(`
              <li class="mode-item" data-index="${index}" data-id="${mode.id}">
                <a href="#">${mode.name}${mode.isDefault ? ' (Default)' : ''}</a>
              </li>
            `)
            .data('themeMode', mode);

            if ((!options.themeMode && mode.isDefault) || options.themeMode === mode.id) {
              options.themeMode = mode.id;
              $item.addClass('selected');
              $themeModeIcon.attr('title', mode.name);
            }
            return $item; 
          })
        )
      );
    if (themeModes.length === 1) $themeMode = null;
  }
  const $icon = PropertyIcon([options]).$icon;

  property.options.parent = _token.id;

  Object.assign(property, {
    tokenList,
    $themeModeList,
    $detachToken,
    $useToken,
    $tokenList,
    $icon,
    $propertyView
  });
  $element.data('value', options).addClass('show');

  _useToken ? $detachToken.data('token', _useToken).css('display', 'flex') : $detachToken.hide();

  return {
    $themeMode,
    $token: tokenList.length ?
      $detachToken.add(
        $useToken.append(
          $tokenList.append(
            tokenList.map((token, index) => 
              $(`<li class="token-item" data-index="${index}"><a href="#">${token.name}</a></li>`)
                .data('token', token)
                .addClass(_useToken && token.name === _useToken.name ? 'selected' : '')
            )
          )
      )) :
      null
  }
};
